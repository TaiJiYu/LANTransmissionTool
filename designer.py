# Form implementation generated from reading ui file 'designer.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(591, 340)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.DefaultContextMenu)
        MainWindow.setStyleSheet("background-color: rgb(49, 49, 49);")
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(parent=self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 610, 481))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        self.tabWidget.setStyleSheet("background-color: rgb(49, 49, 49);\n"
                                     "border-color: rgba(49, 49, 49, 49);\n"
                                     "color: rgb(255, 255, 255);\n"
                                     "")
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.TabPosition.North)
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.TabShape.Triangular)
        self.tabWidget.setMovable(False)
        self.tabWidget.setObjectName("tabWidget")
        self.sendFile = QtWidgets.QWidget()
        self.sendFile.setObjectName("sendFile")
        self.openFileBut = QtWidgets.QPushButton(parent=self.sendFile)
        self.openFileBut.setGeometry(QtCore.QRect(460, 10, 111, 20))
        self.openFileBut.setStyleSheet("border:1px solid rgb(255,255,255);")
        self.openFileBut.setAutoDefault(False)
        self.openFileBut.setObjectName("openFileBut")
        self.lineEdit = QtWidgets.QLineEdit(parent=self.sendFile)
        self.lineEdit.setGeometry(QtCore.QRect(20, 10, 431, 20))
        self.lineEdit.setAutoFillBackground(False)
        self.lineEdit.setStyleSheet("border:2px solid rgb(255,255,255);\n"
                                    "color: rgb(255, 255, 255);")
        self.lineEdit.setInputMethodHints(QtCore.Qt.InputMethodHint.ImhNone)
        self.lineEdit.setFrame(True)
        self.lineEdit.setCursorPosition(0)
        self.lineEdit.setDragEnabled(False)
        self.lineEdit.setReadOnly(True)
        self.lineEdit.setObjectName("lineEdit")
        self.ipCheckBut = QtWidgets.QPushButton(parent=self.sendFile)
        self.ipCheckBut.setGeometry(QtCore.QRect(20, 40, 551, 41))
        self.ipCheckBut.setStyleSheet("border:1px solid rgb(0,255,1);")
        self.ipCheckBut.setObjectName("ipCheckBut")
        self.listWidget = QtWidgets.QListWidget(parent=self.sendFile)
        self.listWidget.setGeometry(QtCore.QRect(20, 120, 551, 191))
        self.listWidget.setStyleSheet("border:1px solid rgb(255,255,255);")
        self.listWidget.setObjectName("listWidget")
        self.ID = QtWidgets.QLineEdit(parent=self.sendFile)
        self.ID.setGeometry(QtCore.QRect(20, 90, 551, 21))
        self.ID.setInputMethodHints(
            QtCore.Qt.InputMethodHint.ImhDigitsOnly | QtCore.Qt.InputMethodHint.ImhUppercaseOnly)
        self.ID.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.ID.setObjectName("ID")
        self.tabWidget.addTab(self.sendFile, "")
        self.getFile = QtWidgets.QWidget()
        self.getFile.setObjectName("getFile")
        self.lineEdit_2 = QtWidgets.QLineEdit(parent=self.getFile)
        self.lineEdit_2.setGeometry(QtCore.QRect(20, 10, 431, 20))
        self.lineEdit_2.setAutoFillBackground(False)
        self.lineEdit_2.setStyleSheet("border:2px solid rgb(255,255,255);\n"
                                      "color: rgb(255, 255, 255);")
        self.lineEdit_2.setInputMethodHints(QtCore.Qt.InputMethodHint.ImhNone)
        self.lineEdit_2.setFrame(True)
        self.lineEdit_2.setCursorPosition(0)
        self.lineEdit_2.setDragEnabled(False)
        self.lineEdit_2.setReadOnly(True)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.openDirBut = QtWidgets.QPushButton(parent=self.getFile)
        self.openDirBut.setGeometry(QtCore.QRect(460, 10, 111, 20))
        self.openDirBut.setStyleSheet("border:1px solid rgb(255,255,255);")
        self.openDirBut.setAutoDefault(False)
        self.openDirBut.setObjectName("openDirBut")
        self.checkReadyFileBut = QtWidgets.QPushButton(parent=self.getFile)
        self.checkReadyFileBut.setGeometry(QtCore.QRect(300, 40, 271, 61))
        self.checkReadyFileBut.setStyleSheet("border:1px solid rgb(255,255,255);\n"
                                             "border-color: rgb(0, 255, 0);")
        self.checkReadyFileBut.setAutoDefault(False)
        self.checkReadyFileBut.setObjectName("checkReadyFileBut")
        self.label_3 = QtWidgets.QLabel(parent=self.getFile)
        self.label_3.setGeometry(QtCore.QRect(130, 50, 16, 16))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(parent=self.getFile)
        self.label_4.setGeometry(QtCore.QRect(190, 50, 16, 16))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(parent=self.getFile)
        self.label_5.setGeometry(QtCore.QRect(250, 50, 16, 16))
        self.label_5.setObjectName("label_5")
        self.checkReadyFileBut_2 = QtWidgets.QPushButton(parent=self.getFile)
        self.checkReadyFileBut_2.setGeometry(QtCore.QRect(20, 40, 271, 61))
        self.checkReadyFileBut_2.setStyleSheet("border:1px solid rgb(255,255,255);")
        self.checkReadyFileBut_2.setAutoDefault(False)
        self.checkReadyFileBut_2.setObjectName("checkReadyFileBut_2")
        self.listWidget_2 = QtWidgets.QListWidget(parent=self.getFile)
        self.listWidget_2.setGeometry(QtCore.QRect(20, 110, 551, 201))
        self.listWidget_2.setStyleSheet("border:1px solid rgb(255,255,255);")
        self.listWidget_2.setObjectName("listWidget_2")
        self.label_5.raise_()
        self.label_4.raise_()
        self.label_3.raise_()
        self.lineEdit_2.raise_()
        self.openDirBut.raise_()
        self.checkReadyFileBut.raise_()
        self.checkReadyFileBut_2.raise_()
        self.listWidget_2.raise_()
        self.tabWidget.addTab(self.getFile, "")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        self.listWidget.setCurrentRow(-1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "局域网文件传输助手"))
        self.openFileBut.setText(_translate("MainWindow", "选择文件"))
        self.ipCheckBut.setText(_translate("MainWindow", "启动服务器"))
        self.listWidget.setSortingEnabled(False)
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.sendFile), _translate("MainWindow", "发送文件"))
        self.openDirBut.setText(_translate("MainWindow", "选择保存位置"))
        self.checkReadyFileBut.setText(_translate("MainWindow", "在局域网内搜索可下载文件"))
        self.label_3.setText(_translate("MainWindow", "."))
        self.label_4.setText(_translate("MainWindow", "."))
        self.label_5.setText(_translate("MainWindow", "."))
        self.checkReadyFileBut_2.setText(_translate("MainWindow", "全部下载"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.getFile), _translate("MainWindow", "接收文件"))
        self.set_event(_translate)

    def get_ip_input(self):
        return "{}.{}.{}.{}".format(self.IP1.text(), self.IP2.text(), self.IP3.text(), self.IP4.text())

    def read_filename_func(self):
        return self.lineEdit.text()

    def check_ready_file_func(self):
        _translate = QtCore.QCoreApplication.translate
        self.listWidget_2.clear()
        self.listWidget_2.addItem(QtWidgets.QListWidgetItem("正在搜索请稍等。。。"))
        setattr(self, "wait_file_list", [])

        def check_process_func(server_id, filename, server_ip):
            if len(self.wait_file_list) == 0:
                self.listWidget_2.item(0).setText("已搜索到部分文件，双击对应条目可直接下载，正在搜索请稍等。。。")
            self.wait_file_list.append((server_id, filename, server_ip))
            self.listWidget_2.addItem(
                QtWidgets.QListWidgetItem("服务器id：{}  可下载文件名：{}".format(server_id, filename)))


        def empty_func():
            self.listWidget_2.clear()
            self.listWidget_2.addItem(QtWidgets.QListWidgetItem("未搜索到可下载文件，请重试"))

        def effective_func():
            self.listWidget_2.item(0).setText("下列为全部可下载文件，双击对应条目可直接下载")

        self.client.check_active_server(process_func=check_process_func, empty_func=empty_func,
                                        effective_func=effective_func)

    def download_all_file_func(self):
        for i in range(self.listWidget_2.count() - 1):
            self.download_file_in_index(i, self.listWidget_2.item(i + 1))

    def download_file_in_index(self, wait_file_list_index, item):
        if wait_file_list_index >= len(self.wait_file_list):
            item.setText("{}\n    下载异常，请重新搜索可下载文件".format(item.text()))
            return
        _translate = QtCore.QCoreApplication.translate
        server_id, filename, server_ip = self.wait_file_list[wait_file_list_index]
        first_info = "服务器id：{}  可下载文件名：{}".format(server_id, filename)
        item.setText(first_info)

        def process_func(completed_size, max_size, speed):
            import 网络控制 as NetC
            n = int(completed_size / max_size * 20)
            m = 20 - n
            css = NetC.format_ispeed(completed_size, False)
            mss = NetC.format_ispeed(max_size, False)
            show_info = "\n     |{}{}| {:.2f}%  {}/{}   {}".format(">" * n, "=" * m, completed_size / max_size * 100,
                                                                   css, mss, speed)
            show_info = "{}{}".format(first_info, show_info)
            item.setText(show_info)

        def timeout_func():
            item.setText("{}\n    {}".format(item.text(), "下载超时，请确认发送方是否正常"))

        def final_func():
            item.setText("{}\n    {}".format(item.text(), "下载完成"))
        filename = "{}/{}".format(self.lineEdit_2.text(), filename)


        self.client.download_file(server_ip, filename, process_func, timeout_func, final_func)

    def process_download_func(self, client_ip, rate, filename):
        wight = self.download_list.get(client_ip, None)
        if wight is None:
            wight = QtWidgets.QListWidgetItem("")
            self.download_list[client_ip] = wight
            self.listWidget.addItem(wight)

        wight.setText("设备[{}]正在下载[{}]文件 进度：{}%".format(client_ip[0], filename, rate))

    def close(self):
        s = getattr(self, "server", None)
        if s is not None:
            s.close()

    def read_server_id_func(self):
        return self.ID.text()

    def switch_server(self):
        from 网络控制 import Server
        s = getattr(self, "server", None)
        if s is None:
            self.ID.setReadOnly(True)
            self.ipCheckBut.setText(
                QtCore.QCoreApplication.translate("MainWindow", "服务已启动，等待下载。ID:{}".format(self.ID.text())))
            setattr(self, "server",
                    Server(self.read_filename_func, self.process_download_func, self.read_server_id_func))
        else:
            self.ID.setReadOnly(False)
            self.ipCheckBut.setText(QtCore.QCoreApplication.translate("MainWindow", "服务已关闭，点击启动服务器"))
            s.close()
            setattr(self, "server", None)
            # ui.check_ip_but_event(lambda x: self.ipCheckBut.setText(_translate("MainWindow", x)))

    def double_clicked_wait_lists_func(self, idx: QtCore.QModelIndex):
        #
        index = idx.row()
        if index == 0:
            return
        else:
            self.download_file_in_index(index - 1, self.listWidget_2.itemFromIndex(idx))

    def set_event(self, _translate):
        import 网络控制 as NetC
        import ui_event as ui
        import shortuuid
        setattr(self, "download_list", {})
        setattr(self, "client", NetC.Client())

        self.ID.setValidator(QtGui.QRegularExpressionValidator())
        self.listWidget_2.addItem(QtWidgets.QListWidgetItem("请尝试搜索局域网内可下载文件"))
        self.listWidget_2.doubleClicked.connect(self.double_clicked_wait_lists_func)
        self.ID.setText(shortuuid.ShortUUID(alphabet='0123456789ABCDEF').random(length=8))
        self.openFileBut.clicked.connect(
            ui.get_upload_file_but_event(lambda x: self.lineEdit.setText(_translate("MainWindow", x))))
        self.ipCheckBut.clicked.connect(self.switch_server)
        self.openDirBut.clicked.connect(
            ui.get_download_path_but_event(lambda x: self.lineEdit_2.setText(_translate("MainWindow", x))))
        self.checkReadyFileBut.clicked.connect(self.check_ready_file_func)
        self.checkReadyFileBut_2.clicked.connect(self.download_all_file_func)
